pipeline {
    agent {
        dockerfile {
            dir 'jenkins/jobs/frontend'
        }
    }
    parameters {
        booleanParam(name: 'reuse_artifacts', defaultValue: true, description: 'Reuse old artifact when no changes are detected')
        booleanParam(name: 'force_npm_install', defaultValue: false)
    }
    stages {
        stage('Checkout') {
            steps {
                // Checkout code from Git repository
                git branch: 'main',
                url: 'https://github.com/gpremo-re/dummy-app.git'
            }
        }
        stage('Install Dependencies') {
            when {
                anyOf {
                    expression { params.force_npm_install == true }
                    expression { fileExists('frontend/node_modules') == false }
                    expression { currentBuild.previousCompletedBuild == null }
                    changeset 'frontend/package.json'
                }
            }
            steps {
                dir('frontend') {
                    sh 'npm install'
                }
            }
        }
        stage('Build') {
            when {
                anyOf {
                    expression { params.reuse_artifacts == false }
                    expression { currentBuild.previousCompletedBuild == null }
                    expression { fileExists('frontend/dist') == false }
                    changeset 'frontend/src/**'
                    changeset 'frontend/angular.json'
                    changeset 'tsconfig.app.json'
                    changeset 'tsconfig.json'
                }
            }
            steps {
                dir('frontend') {
                    sh 'npx ng build -c=production'
                }
            }
        }
//         stage('Reuse Previous Artifact') {
//             when {
//                 allOf {
//                     expression {
//                         dir('frontend/dist') { !findFiles().any() }
//                     }
//                     expression { previousCompletedBuild != null }
//                 }
//             }
//             steps {
//                 // Copy artifacts
//                 script {
//                     step ([$class: 'CopyArtifact',
//                            projectName: currentBuild.projectName,
//                            selector: specific("${currentBuild.previousCompletedBuild.number}"),
//                            target: '.frontend/dist' ])
//                 }
//             }
//         }
    }
    post {
        success {
            archiveArtifacts artifacts: 'frontend/dist/**', allowEmptyArchive: true
        }
    }
}
