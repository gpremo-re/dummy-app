pipeline {
    agent any
    parameters {
        booleanParam(name: 'force_rebuild_frontend', defaultValue: false)
        booleanParam(name: 'force_npm_install', defaultValue: false)
        booleanParam(name: 'force_rebuild_backend', defaultValue: false)
    }
    stages {
        stage('Checkout') {
            steps {
                // Checkout code from Git repository
                git branch: 'main',
                    url: 'https://github.com/gpremo-re/dummy-app.git'
            }
        }
        stage ('Build App') {
            parallel {
                stage ('Build Frontend') {
                    agent {
                        dockerfile { dir 'jenkins/jobs/frontend' }
                    }
                    stages {
                        stage ('Install Frontend Dependencies') {
                            when {
                                anyOf {
                                    expression { params.force_npm_install == true }
                                    expression { fileExists('frontend/node_modules') == false }
                                    expression { currentBuild.previousCompletedBuild == null }
                                    changeset 'frontend/package.json'
                                }
                            }
                            steps {
                                dir('frontend') {
                                    sh 'npm install'
                                }
                            }
                        }
                        stage('Build Frontend') {
                            when {
                                anyOf {
                                    expression { params.force_rebuild_frontend == true }
                                    expression { currentBuild.previousCompletedBuild == null }
                                    expression { fileExists('frontend/dist') == false }
                                    changeset 'frontend/src/**'
                                    changeset 'frontend/angular.json'
                                    changeset 'tsconfig.app.json'
                                    changeset 'tsconfig.json'
                                }
                            }
                            steps {
                                dir('frontend') {
                                    sh 'npx ng build -c=production'
                                }
                            }
                        }
                    }
                }
                stage ('Build Backend') {
                    agent {
                        dockerfile { dir 'jenkins/jobs/backend' }
                    }
                    when {
                        anyOf {
                            expression { params.force_rebuild_backend == true }
                            expression { currentBuild.previousCompletedBuild == null }
                            changeset 'build.gradle.kts'
                            changeset 'src/main/java/**'
                            changeset 'src/main/resources/**'
                        }
                    }
                    steps {
                        sh 'gradle clean compileJava --no-daemon'
                    }
                }
            }
        }
        stage ('Copy Frontend Build') {
            steps {
                fileOperations([fileCopyOperation(
                    excludes: '',
                    flattenFiles: false,
                    includes: './frontend/dist/**',
                    targetLocation: './build/resources/static'
                )])
            }
        }
        stage ('Assemble Jar') {
            agent {
                dockerfile { dir 'jenkins/jobs/backend' }
            }
            steps {
                // Assemble
                sh 'gradle assemble --no-daemon'
            }
            post {
                success {
                    archiveArtifacts artifacts: 'build/libs/*.jar'
                }
            }
        }
    }
}

