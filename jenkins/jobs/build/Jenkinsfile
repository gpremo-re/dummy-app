pipeline {
    agent any
    stages {
        stage ('Build App') {
            parallel {
                stage ('Build Frontend') {
                    steps {
                        build([
                            job       : 'build-frontend',
                            wait      : true,
                        ])
                    }
                }
                stage ('Build Backend') {
                    steps {
                        build([
                            job       : 'build-backend',
                            wait      : true
                        ])
                    }
                }
            }
        }
        stage ('Assemble Jar') {
            agent {
                dockerfile { dir 'jenkins/jobs/backend' }
            }

            steps {
                // Copy artifacts
                script {
                    step ([$class: 'CopyArtifact',
                           projectName: 'build-backend',
                           selector: [$class: 'LastWithArtifacts'],
                           target: '.',
                           fingerprintArtifacts: true])
                    step ([$class: 'CopyArtifact',
                           projectName: 'build-frontend',
                           selector: [$class: 'LastWithArtifacts'],
                           target: './build/resources/static',
                           fingerprintArtifacts: true])
                }

                // Assemble
                sh 'chmod +x ./gradlew'
                sh './gradlew assemble'
            }
            post {
                success {
                    archiveArtifacts artifacts: 'build',
                                    excludes: 'build/classes, build/generated, build/tmp, build/resources/main/static'
                }
            }
        }
    }
}

